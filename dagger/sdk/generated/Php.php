<?php

/**
 * This class has been generated by dagger-php-sdk. DO NOT EDIT.
 */

declare(strict_types=1);

namespace Dagger;

class Php extends Client\AbstractObject implements Client\IdAble
{
    public function apache(?string $version = '8.3', ?string $os = 'alpine'): Container
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('apache');
        if (null !== $version) {
        $innerQueryBuilder->setArgument('version', $version);
        }
        if (null !== $os) {
        $innerQueryBuilder->setArgument('os', $os);
        }
        return new \Dagger\Container($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    public function cli(?string $version = '8.3', ?string $os = 'alpine'): Container
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('cli');
        if (null !== $version) {
        $innerQueryBuilder->setArgument('version', $version);
        }
        if (null !== $os) {
        $innerQueryBuilder->setArgument('os', $os);
        }
        return new \Dagger\Container($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    public function fpm(?string $version = '8.3', ?string $os = 'alpine'): Container
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('fpm');
        if (null !== $version) {
        $innerQueryBuilder->setArgument('version', $version);
        }
        if (null !== $os) {
        $innerQueryBuilder->setArgument('os', $os);
        }
        return new \Dagger\Container($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * A unique identifier for this Php.
     */
    public function id(): PhpId
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('id');
        return new \Dagger\PhpId((string)$this->queryLeaf($leafQueryBuilder, 'id'));
    }

    /**
     * Install a PHP extension into a container
     */
    public function withExtension(ContainerId|Container $container, string $extension): Container
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withExtension');
        $innerQueryBuilder->setArgument('container', $container);
        $innerQueryBuilder->setArgument('extension', $extension);
        return new \Dagger\Container($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    public function zts(?string $version = '8.3', ?string $os = 'alpine'): Container
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('zts');
        if (null !== $version) {
        $innerQueryBuilder->setArgument('version', $version);
        }
        if (null !== $os) {
        $innerQueryBuilder->setArgument('os', $os);
        }
        return new \Dagger\Container($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }
}
